/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package clases;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;

public class Main {
    
	public static void main (String [] args) {
    }
    
    /**
     * Inserta un objeto de tipo User profile en la lista
     * @param lista
     * @param datos formato "nick>dd/MM/yyyy>3.2
     */
    public static void alta (List<UserProfile> lista, String datos) {
    	
    	UserProfile user = procesaEntrada(datos);
    	
		lista.add(user);

    }
    
    static UserProfile procesaEntrada(String entrada) {
    	UserProfile user = null;
    	String[] datosU = entrada.split(">");

		String nick = datosU[0];
		LocalDate regDate = LocalDate.parse(datosU[1], DateTimeFormatter.ofPattern("dd/MM/yyyy"));
		Float rating = Float.parseFloat(datosU[2]);

		user = new UserProfile(nick, regDate, rating);
		return user;
    }
    
    /**
     * Elimina un objeto de la lista
     * @param lista
     * @param elemento a Eliminar
     * @return true si se elimino, false en caso contrario
     */
    public static boolean baja (List<UserProfile> lista, UserProfile elemento) {
    	
    	boolean validador = false;
    	
    	if (lista.remove(elemento)) {
    		validador = true;
    	}
    	
    	return validador;
    }
    
    /**
     * Guarda los datos a un fichero
     * Pregunta al usuario el nombre del fichero y lo recupera
     * usando el metodo nextLine() de Scanner
     * Por cada elemento de la lista escribe una linea en el fichero
     * con el mismo formato que utiliza el alta de lista
     * @param lista
     */
    public static void salvarDatos(List<UserProfile> lista) {
		Scanner teclado = new Scanner(System.in);
		String opcion = teclado.nextLine();

		try {
			File file = new File(opcion);
			FileOutputStream fileout = new FileOutputStream(file);
			BufferedWriter BWriter = new BufferedWriter(new OutputStreamWriter(fileout));

			Iterator<UserProfile> itUsers = lista.iterator();
			while (itUsers.hasNext()) {
				UserProfile user = itUsers.next();

				// nick>dd/MM/yyyy>3.2
				BWriter.write(user.toString());
				BWriter.newLine();
			}

			BWriter.close();
			System.out.println("El archivo ha sido modificado correctamente.");
		} catch (IOException e) {
			System.out.println("Ha ocurrido un error.");
			e.printStackTrace();
		}
    }
    
    /**
     * Fichero que lee de disco un fichero con datos para cargarlo en
     * la lista que se pasa como parametro
     * Pregunta al usuario el nombre del fichero y lo recupera
     * usando el metodo nextLine() de Scanner
     * Por cada elemento de la lista hay una linea en el fichero
     * con el mismo formato que utiliza el alta de lista
     * @param lista
     */
    public static void cargarDatos(List<UserProfile> lista) {
		Scanner teclado = new Scanner(System.in);
		System.out.println("Â¿Que archivo desea cargar?");
		String opcion = teclado.nextLine();

	    File file = new File(opcion);
	    if (file.exists()) {
	    	FileReader frfile = null;
			try {
				frfile = new FileReader (opcion);
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	    	BufferedReader brfile = new BufferedReader(frfile);

	         // Lectura del fichero
	         String linea;
	         try {
				while((linea = brfile.readLine()) != null) {
					// Procesar la entrada.
					UserProfile user = procesaEntrada(linea);
					// Crear el usuario con los datos de la entrada.
					lista.add(user);
				 }
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	    	// Cargamos los libros del fichero.
	    	
	    } else {
	      System.out.println("El archivo indicado no existe.");
	    }
    }
    
    /**
     * Metodo que realiza el ordenamiento natural de una lista que se pasa
     * como parametro
     * @param lista
     */
    public static void ordena(List<UserProfile> lista) {
		Collections.sort(lista);

		for (UserProfile libro : lista) {
			System.out.println(libro.toString());
		}
    }
    
    /**
     * Metodo que realiza el ordenamiento por Rating de una lista que se pasa
     * como parametro
     * @param lista
     */
    public static void ordenaRating(List<UserProfile> lista) {
		Collections.sort(lista, new UserProfile());

		for (UserProfile libro : lista) {
			System.out.println(libro.toString());
		}
    }
    
    
    
    
    
}